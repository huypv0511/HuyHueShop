@model Model.EF.User
@using Model.Dao

@{
    int id = Convert.ToInt32(ViewData["id"]);
    var user = new UserDao().ViewDetail(id);
}
  
@using (Ajax.BeginForm("Edit", "Admin", new AjaxOptions { HttpMethod= "POST", OnSuccess ="ShowSuccess" }))
{
    @Html.ValidationSummary(false, "", new { @class = "custom-validation-summary" })
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-body">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="myModalLabel">Thông tin khách hàng</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="id" name="id" value="@user.ID" />
                        <div class="col_full">
                            <label for="register-form-username" id="oldUserMess">Tài khoản:&nbsp;</label>
                            <label for="register-form-username" id="userMess" style="color:red"></label>
                            @Html.TextBoxFor(model => model.Username, new { id = "register-form-username", name = "register-form-username", @class = "form-control", @placeholder = @user.Username, @readonly = "readonly" })
                        </div>
                        <div class="col_full">
                            <label for="register-form-password" id="oldpass">Mật khẩu:</label>
                            <label for="register-form-password" id="pass" style="color:red"></label>
                            @Html.PasswordFor(model => model.Password, new { id = "register-form-password", name = "register-form-password", @class = "form-control", @placeholder = "••••••••••", @readonly = "readonly", @Autocomplete = "off" })
                        </div>
                        <div class="col_full">
                            <label for="register-form-name">Họ và tên:</label>
                            @Html.TextBoxFor(model => model.Fullname, new { id = "register-form-name", name = "register-form-name", @class = "form-control", @placeholder = @user.Fullname })
                        </div>
                        <div class="col_full">
                            <label for="register-form-name">Địa chỉ:</label>
                            @Html.TextBoxFor(model => model.Address, new { id = "register-form-address", name = "register-form-address", @class = "form-control", @placeholder = @user.Address })
                        </div>
                        <div class="col_full">
                            <label for="register-form-email" id="oldemail">Địa chỉ Email:</label>
                            <label for="register-form-email" id="email" style="color:red"></label>
                            @Html.TextBoxFor(model => model.Email, new { id = "register-form-email", name = "register-form-email", @class = "form-control", @placeholder = @user.Email })
                        </div>
                        <div class="col_full">
                            <label for="register-form-phone" id="oldphone">Số điện thoại:</label>
                            <label for="register-form-phone" id="phone" style="color:red"></label>
                            @Html.TextBoxFor(model => model.SDT, new { id = "register-form-phone", name = "register-form-phone", @class = "form-control", @maxlength = "12", @placeholder = @user.SDT })
                        </div>
                        <button id ="success" type="submit" class="btn btn-primary">Lưu lại</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                        <div id="notID">
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}
<script type="text/javascript">
    $(document).ready(function () {
        $("#register-form-phone").keypress(function (e) {
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
    });

    function ShowSuccess(data) {
        if (data.isok == true) {
            $('#success').attr({
                'data-notify-type': 'success',
                'data-notify-msg': '<i class=icon-ok-sign></i> Chỉnh sửa thành công!'
            });
            SEMICOLON.widget.notifications('#success');
            window.setTimeout(function () { window.location.reload() }, 3000);
        } else
        {
            $('#success').attr({
                'data-notify-type': 'error',
                'data-notify-msg': '<i class=icon-remove-sign></i> Chỉnh sửa không thành công!'
            })
            SEMICOLON.widget.notifications('#success');
            return false;
            $('#notID').css("color", "red");
            $('#notID').html('Chỉnh sửa không thành công!');
        }
    }
</script>